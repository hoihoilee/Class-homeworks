/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Fri Apr 20 18:40:29 KST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkHelloWorld.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkHelloWorld::MODEL_mkHelloWorld()
{
  mkHelloWorld_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkHelloWorld()
{
  MODEL_mkHelloWorld *model = new MODEL_mkHelloWorld();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkHelloWorld &INST_top = *((MOD_mkHelloWorld *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_say_hello;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_say_hello;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_say_bye;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_say_bye;
	 INST_top.DEF__read__h66 = INST_top.INST_counter.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_say_bye = (INST_top.DEF__read__h66) == (tUInt8)5u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_say_bye = DEF_INST_top_DEF_CAN_FIRE_RL_say_bye;
	 DEF_INST_top_DEF_CAN_FIRE_RL_say_hello = (INST_top.DEF__read__h66) < (tUInt8)5u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_say_hello = DEF_INST_top_DEF_CAN_FIRE_RL_say_hello;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_say_bye)
	   INST_top.RL_say_bye();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_say_hello)
	   INST_top.RL_say_hello();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_counter.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkHelloWorld::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkHelloWorld_instance = new MOD_mkHelloWorld(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkHelloWorld_instance->set_clk_0)("CLK");
}
void MODEL_mkHelloWorld::destroy_model()
{
  delete mkHelloWorld_instance;
  mkHelloWorld_instance = NULL;
}
void MODEL_mkHelloWorld::reset_model(bool asserted)
{
  (mkHelloWorld_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkHelloWorld::get_instance()
{
  return mkHelloWorld_instance;
}

/* Fill in version numbers */
void MODEL_mkHelloWorld::get_version(unsigned int *year,
				     unsigned int *month,
				     char const **annotation,
				     char const **build)
{
  *year = 2014u;
  *month = 7u;
  *annotation = "A";
  *build = "34078";
}

/* Get the model creation time */
time_t MODEL_mkHelloWorld::get_creation_time()
{
  
  /* Fri Apr 20 09:40:29 UTC 2018 */
  return 1524217229llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkHelloWorld::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkHelloWorld::dump_state()
{
  (mkHelloWorld_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkHelloWorld & mkHelloWorld_backing(tSimStateHdl simHdl)
{
  static MOD_mkHelloWorld *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkHelloWorld(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkHelloWorld::dump_VCD_defs()
{
  (mkHelloWorld_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkHelloWorld::dump_VCD(tVCDDumpType dt)
{
  (mkHelloWorld_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkHelloWorld_backing(sim_hdl));
}
