let proc makeTree(i, lt, rt) =
	{val := i, ltree := lt, rtree := rt} in

let proc leaf(i) =
	makeTree(i, unit, unit) in

let proc makeLtree(i, t) =
	makeTree(i, t, unit) in

let proc makeRtree(i, t) =
	makeTree(i, unit, t) in

let proc isEmpty(t) =
	if (t = unit) then true
	else false in

let proc rTree(t) =
	if (t = unit) then unit
	else t.rtree in

let proc lTree(t) =
	if (t = unit) then unit
	else t.ltree in

let proc nodeVal(t) =
	if (isEmpty(t)) then -37707
	else t.val in

let proc dft(t) =
  if (isEmpty(t)) then unit
  else (
		write(nodeVal(t));
		let lt := lTree(t) in
		let rt := rTree(t) in
    dft(lt);
    dft(rt)) in

let proc makeQ(t, n) =
	{val := t, node := n} in

let proc pushQ(q, t) =
	if (isEmpty(t)) then unit
	else (if (q = unit) then
		q := makeQ(t, unit)
	else
		let node := q.node in
		pushQ<node, t>;
		q.node := node) in

let proc popQ(q) =
	if (q = unit) then unit
	else
		let val := q.val in
		q := q.node;
		val in

let proc bft(t) =
	let q := makeQ(t, unit) in

	while ((q = unit) = false) do
		let curr := popQ<q> in
		write(nodeVal(curr));
		let lt := lTree(curr) in
		let rt := rTree(curr) in
		pushQ<q, lt>;
		pushQ<q, rt> in


let t1 := makeTree (1, leaf(2), leaf(3)) in
let t0 := makeTree (0, t1, leaf(4)) in
let t0 := makeTree (2, t0, leaf(3)) in
let t0 := makeTree (-3, t0, t1) in
let t0 := makeLtree (8, t1) in
let t0 := makeRtree (23, t0) in
let t1 := makeRtree (-42, t0) in
let t1 := makeLtree (5, t1) in
let t1 := makeTree (8, t1, t0) in
let t1 := makeTree (30, t0, t1) in
 let t0 := makeLtree (0, t1) in
let t0 := makeTree (-4, t1, t0) in
let t2 := makeTree (9, t1, leaf(5)) in
let t2 := makeTree (-32, t2, t2) in
let t2 := makeRtree (1, t1) in
bft (t0) ;
 bft (t1) ;
 dft (t0) ;
 dft (t1) ;
 bft (t2) ;
 dft (t2)

